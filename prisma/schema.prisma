generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider            = "prisma-dbml-generator"
  projectName         = "idp"
  projectDatabaseType = "PostgreSQL"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid     String @id @default(uuid()) @db.Uuid
  password String

  name        String
  email       String @unique
  studentId   String @unique @map("student_id")
  phoneNumber String @unique @map("phone_number") @db.VarChar(11)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clients Client[]  @relation("ClientToUser")
  consent Consent[]

  @@map("user")
}

model Client {
  uuid      String   @id @default(uuid()) @db.Uuid
  id        String   @unique
  password  String
  name      String
  urls      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  idTokenAllowed  Boolean  @default(false)
  implicitAllowed Boolean  @default(false)
  scopes          String[]
  optionalScopes  String[] @map("optional_scopes")

  member  User[]    @relation("ClientToUser")
  consent Consent[]

  @@map("client")
}

model RefreshToken {
  token     String   @id
  scopes    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clientUuid String  @db.Uuid
  userUuid   String  @db.Uuid
  consent    Consent @relation(fields: [clientUuid, userUuid], references: [clientUuid, userUuid])

  @@map("refresh_token")
}

model Consent {
  clientUuid String   @db.Uuid
  userUuid   String   @db.Uuid
  scopes     String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  client       Client         @relation(fields: [clientUuid], references: [uuid])
  user         User           @relation(fields: [userUuid], references: [uuid])
  refreshToken RefreshToken[]

  @@id([clientUuid, userUuid])
  @@map("consent")
}
