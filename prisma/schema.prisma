generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../docs/erd.md"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid     String @id @default(uuid()) @db.Uuid
  password String

  profile     String?
  picture     String?
  name        String
  email       String  @unique
  studentId   String  @unique @map("student_id")
  phoneNumber String  @unique @map("phone_number") @db.VarChar(30)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clients         Client[]       @relation("ClientToUser")
  consent         Consent[]
  RefreshToken    RefreshToken[]
  authenticators  Authenticator[]

  @@map("user")
}

model Client {
  uuid   String @id @default(uuid()) @db.Uuid
  secret String

  name              String
  picture           String?
  urls              String[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deleteRequestedAt DateTime? @map("delete_requested_at")

  idTokenAllowed Boolean  @default(false)
  scopes         String[]
  optionalScopes String[] @map("optional_scopes")

  member       User[]         @relation("ClientToUser")
  consent      Consent[]
  RefreshToken RefreshToken[]

  @@map("client")
}

model RefreshToken {
  token     String   @id
  createdAt DateTime @default(now())
  expiresAt DateTime
  nonce     String?  @db.VarChar(255)
  scopes    String[]

  clientUuid String @db.Uuid
  userUuid   String @db.Uuid

  client Client @relation(fields: [clientUuid], references: [uuid], onDelete: Cascade)
  user   User   @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@map("refresh_token")
}

model Consent {
  clientUuid String   @db.Uuid
  userUuid   String   @db.Uuid
  scopes     String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  client Client @relation(fields: [clientUuid], references: [uuid], onDelete: Cascade)
  user   User   @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@id([clientUuid, userUuid])
  @@map("consent")
}

model Authenticator {
  id            String  @id @default(uuid())
  name          String
  credentialId  String  @unique @map("credential_id")
  publicKey     Bytes   @map("public_key")
  counter       Int
  userUuid      String  @db.Uuid @map("user_uuid")

  user          User    @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@map("authenticator")
}
